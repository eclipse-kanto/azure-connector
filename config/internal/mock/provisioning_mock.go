// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: provisioning.go

package mock_commons

import (
	"github.com/eclipse-kanto/azure-connector/config"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockProvisioningService is a mock of ProvisioningService interface
type MockProvisioningService struct {
	ctrl     *gomock.Controller
	recorder *MockProvisioningServiceMockRecorder
}

// MockProvisioningServiceMockRecorder is the mock recorder for MockProvisioningService
type MockProvisioningServiceMockRecorder struct {
	mock *MockProvisioningService
}

// NewMockProvisioningService creates a new mock instance
func NewMockProvisioningService(ctrl *gomock.Controller) *MockProvisioningService {
	mock := &MockProvisioningService{ctrl: ctrl}
	mock.recorder = &MockProvisioningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProvisioningService) EXPECT() *MockProvisioningServiceMockRecorder {
	return _m.recorder
}

// Init mocks base method
func (_m *MockProvisioningService) Init(client config.ProvisioningHTTPClient, provisioningFile io.ReadWriter) {
	_m.ctrl.Call(_m, "Init", client, provisioningFile)
}

// Init indicates an expected call of Init
func (_mr *MockProvisioningServiceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Init", reflect.TypeOf((*MockProvisioningService)(nil).Init), arg0, arg1)
}

// GetDeviceData mocks base method
func (_m *MockProvisioningService) GetDeviceData(idScope string, connSettings *config.AzureConnectionSettings) (*config.AzureDeviceData, error) {
	ret := _m.ctrl.Call(_m, "GetDeviceData", idScope, connSettings)
	ret0, _ := ret[0].(*config.AzureDeviceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceData indicates an expected call of GetDeviceData
func (_mr *MockProvisioningServiceMockRecorder) GetDeviceData(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDeviceData", reflect.TypeOf((*MockProvisioningService)(nil).GetDeviceData), arg0, arg1)
}

// MockProvisioningHTTPClient is a mock of ProvisioningHTTPClient interface
type MockProvisioningHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockProvisioningHTTPClientMockRecorder
}

// MockProvisioningHTTPClientMockRecorder is the mock recorder for MockProvisioningHTTPClient
type MockProvisioningHTTPClientMockRecorder struct {
	mock *MockProvisioningHTTPClient
}

// NewMockProvisioningHTTPClient creates a new mock instance
func NewMockProvisioningHTTPClient(ctrl *gomock.Controller) *MockProvisioningHTTPClient {
	mock := &MockProvisioningHTTPClient{ctrl: ctrl}
	mock.recorder = &MockProvisioningHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProvisioningHTTPClient) EXPECT() *MockProvisioningHTTPClientMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockProvisioningHTTPClient) Get(url string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockProvisioningHTTPClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockProvisioningHTTPClient)(nil).Get), arg0)
}

// Post mocks base method
func (_m *MockProvisioningHTTPClient) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (_mr *MockProvisioningHTTPClientMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Post", reflect.TypeOf((*MockProvisioningHTTPClient)(nil).Post), arg0, arg1, arg2)
}

// Do mocks base method
func (_m *MockProvisioningHTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (_mr *MockProvisioningHTTPClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Do", reflect.TypeOf((*MockProvisioningHTTPClient)(nil).Do), arg0)
}
